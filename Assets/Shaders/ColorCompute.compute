/**
Realiza convolución de matrices sobre una textura.
*/

#pragma kernel CSMain

/**
Contiene data utilizada para debugar el shader
*/
struct DebugObject
{
    float3 data;
};

/** Buffer con data para debugear el shader */
RWStructuredBuffer<DebugObject> DebugBuffer;
/** Textura sobre la que aplicar filtro */
Texture2D<float4> InputTexture;
/** Textura con el filtro aplicado */
RWTexture2D<float4> Result;
/** Matriz de convolucion */
float3x3 ConvolutionMatrix;
/** Resolucion de la textura */
int Resolution;
/** Indica con cuanta fuerza se aplica el filtro. */
int Strength;

/**
Para un canal rgb, retorna el valor de la convolución
@id - coordenadas del pixel
@channel - canal rgb sobre el que aplicar convolucion. Puede ser 0,1 o 2.
*/
float GetConvolutedPixel(uint3 id, int channel)
{
    float3x3 kernelData;
    int offset = 1 * Strength;
    kernelData[0][0] = InputTexture[id.xy-offset][channel];
    kernelData[0][1] = InputTexture[float2(id.x,id.y-offset)][channel];
    kernelData[0][2] = InputTexture[float2(id.x+offset,id.y+offset)][channel];
    kernelData[1][0] = InputTexture[float2(id.x-offset,id.y)][channel];
    kernelData[1][1] = InputTexture[id.xy][channel];
    kernelData[1][2] = InputTexture[float2(id.x+offset,id.y)][channel];
    kernelData[2][0] = InputTexture[float2(id.x-offset,id.y+offset)][channel];
    kernelData[2][1] = InputTexture[float2(id.x,id.y+offset)][channel];
    kernelData[2][2] = InputTexture[float2(id.x+offset,id.y+offset)][channel];
    
    float finalValue = 0.0;
    for(uint i=0; i<3; i++)
    {
        for(uint j=0; j<3; j++)
        {
            finalValue += kernelData[i][j] * ConvolutionMatrix[i][j];
        }
    }
    return finalValue;
}

//grupos de 64x64(4096), con 8x8(64) hilos
//(64,64,1) * (8,8,1) + (7,7,1) = (519,519,2)

/**
Para grupos de 64x64, con 8x8 hilos cada uno, aplica la matriz de convolucion sobre cada pixel
*/
[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    DebugObject o = DebugBuffer[id.x];
    
    float4 finalColor;
    finalColor.x = GetConvolutedPixel(id,0);
    finalColor.y = GetConvolutedPixel(id,1);
    finalColor.z = GetConvolutedPixel(id,2);
    finalColor.w = 1.0;
    o.data = float3(finalColor.xyz);
    DebugBuffer[id.x] = o;
    
    Result[id.xy] = finalColor;
}
